package repo;

import models.*;
import services.*;

import java.util.HashMap;
import java.util.List;
import java.util.UUID;

public interface IRepo {
    List<UserRank> getTopUserRanks();
    boolean checkUsernamePassword(String username, long hashedPassword);
    boolean addNewUser(String username, long hashedPassword, String discordTag, UUID identificator);
    boolean existsUsername(String username);
    boolean createChallenge(ChallengeInfo challenge);
    List<ChallengeInfo> getChallenges(int maxNumOfChallenges);
    List<ReportMatchService.MatchInfo> getRecentMatches(int maxNumOfMatches);
    boolean existsDiscord(String discord);
    boolean confirmUser(String username, UUID identificator);
    void removeUser(String username);
    String getDiscordTaglOfUsername(String username);
    String getDiscordTagOfUser(int userId);
    void saveReport(ReportMatchService.MatchReport report, UUID identificator);
    ReportMatchService.MatchReport getReport(UUID identificator);
    void saveMatch(ReportMatchService.MatchInfo info);
    double getPlayerEloById(int losingUserId);
    void updateELO(int userid, double newELO);
    ReportMatchService.MatchReport pullReport(UUID identificator);
    ChallengeInfo getChallengeInfo(int challengeId);
    int getUserId(String username);
    void setInitialEloForUser(int userId);
    void removeChallenge(int id);
    void saveFeedback(String message);
    boolean saveLadderPriorities(LadderPriorities ladderPriorities);
    List<LadderPriorities> getAllLadderPriorities();
    List<String> getMapPool();
    boolean saveLadderMatch(LadderMatchInfo matchInfo);
    boolean clearPriorities(int user1Id);
    List<OngoingLadderMatch> getOngoingLadderMatchesOfUser(int userId);
    OngoingLadderMatch getOngoingMatchById(int id);
    List<OngoingLadderMatch> getOngoingLadderMatches(int maxRows);
    boolean deleteLadderMatch(int ladderMatchId);
    boolean existsLadderMatch(int ladderMatchId);
    LadderPriorities getLadderPriorities(int userId);
    boolean deleteLadderPriorities(int userId);
    List<GladiatorStreak> getCurrentGladiatorStreaks(int maxRows);
    List<GladiatorStreak> getHallOfFame(int maxRows);
    HashMap<Integer, List<String>> getUsedHeroesOfGladiators();
    String getUsername(int userId);
    boolean saveGladiatorChallenge(int userId, int challengedUserId, RankPlacement rankPosition, int priority1, int priority2, int mapVeto, UUID identificator);
    int getMapId(String mapName);
    GladiatorChallenge getGladiatorChallenge(UUID identificator);
    GladiatorChallenge getGladiatorChallenge(int challengeId);
    boolean deleteGladiatorChallenge(int userId, UUID identificator);
    HashMap<Integer, String> getMapPoolHashMap();
    void putMapToPlayInChallenge(int id, int mapToBePlayed);
    boolean updateChallengingUserHero(int challengeId, int heroId);
    boolean updateChallengedUserHero(int challengeId, int heroId);
    boolean resetHeroesForChallenge(int challengeId);
    boolean addHeroAsUnavailibleForChallenge(int challengeId, int heroId);
    int getHeroId(String heroName);
    List<Integer> getUsedHeroOfGladiator(int userId);
    String getHeroName(int heroId);
    List<Integer> getUnavailibleHeroesForChallenge(int challengeId);
    boolean saveLadderGladiatorMatch(GladiatorChallenge challenge);
    String getMapName(int mapToBePlayed);
    boolean clearUnavailibleHeroesForChallenge(int id);
    HashMap<Integer, List<String>> getHallOfFameUseddHeroes();
    boolean gladiatorChallengeOfLadderMatch(int ladderMatchId);
    int getHeroIdOfWinner(int ladderMatchId, int winningUserId);
    boolean addHeroToUsedHereoesOfUser(int winningUserId, int heroOfWinner);
    boolean clearCurrentlyUsedHeroes(int ladderMatchId);
    boolean clearUsedHeroesOfUser(int losingUserId);
    int increaseStreakAndReturnValue(int winningUserId);
    int getHallOfFameStreakOfUser(int winningUserId);
    boolean insertHallOfFameRow(int winningUserId, int currentStreak);
    boolean updateHallOfFameRow(int winningUserId, int currentStreak);
    boolean putUsedHeroesToHallOfFameHeroes(int winningUserId);
    boolean checkIfGladiator(int userId);
    boolean addNewGladiator(int userId);
    boolean clearStreakOfUser(int userId);
}
